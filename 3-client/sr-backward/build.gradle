buildscript {
    repositories {
        mavenCentral()
        maven {
            url = uri("https://packages.confluent.io/maven/")
        }
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
        maven {
            url = uri("https://jitpack.io")
        }
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'com.github.eirnym.js2p' version '1.0'
    id "com.google.protobuf" version "0.8.16"
    id "com.github.imflog.kafka-schema-registry-gradle-plugin" version "1.1.1"
    id "com.github.davidmc24.gradle.plugin.avro" version "1.0.0"
}

sourceCompatibility = JavaVersion.VERSION_14
targetCompatibility = JavaVersion.VERSION_14

repositories {
    mavenCentral()
    maven {
        url = uri("https://packages.confluent.io/maven/")
    }

    maven {
        url = uri("https://jitpack.io")
    }
}

dependencies {
    implementation "org.apache.avro:avro:1.10.0"
    implementation "com.kjetland:mbknor-jackson-jsonschema_2.13:1.0.39"
    implementation 'javax.validation:validation-api:1.1.0.CR2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.7'
    implementation "com.google.protobuf:protobuf-java:3.11.4"

    implementation "io.confluent:kafka-streams-avro-serde:5.5.1"
    implementation "io.confluent:kafka-streams-protobuf-serde:5.5.1"
    implementation "io.confluent:kafka-avro-serializer:5.5.1"
    implementation "io.confluent:kafka-protobuf-serializer:5.5.1"
    implementation "io.confluent:kafka-json-serializer:5.5.1"
    implementation "io.confluent:kafka-json-schema-serializer:5.5.1"
    implementation "io.confluent:kafka-json-schema-provider:5.5.1"
    implementation "io.confluent:kafka-protobuf-provider:5.5.1"
    implementation "org.apache.logging.log4j:log4j-api:2.7"
    implementation "org.apache.logging.log4j:log4j-core:2.7"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:2.7"


    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
}

protobuf {
    generatedFilesBaseDir = "${project.buildDir}/generated-main-proto-java"

    protoc {
        artifact = 'com.google.protobuf:protoc:3.15.3'
    }
}

jsonSchema2Pojo {
    targetPackage = 'bbejeck.json.generated'
    generateBuilders = true
    annotationStyle = "JACKSON2"
    source = files("${project.projectDir}/src/main/json")
    targetDirectory = file("${project.buildDir}/generated-main-json-java")
    includeJsr303Annotations = false
    propertyWordDelimiters = ['_'] as char[]
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}


//Schema Registry section
schemaRegistry {
    url = 'http://localhost:8081'
// optional set these if you have Schema Regsitry set up for authentication
//    credentials {
//        username = 'basicauthentication-username'
//        password = 'basicauthentication-password'
//    }

    compatibility {
        subject('avro-avengers-value', "sr-backward/src/main/avro/avenger_v2.avsc", 'AVRO')
    }

    register {
        subject('avro-avengers-value', 'sr-backward/src/main/avro/avenger_v2.avsc', 'AVRO')
    }

    config {
        subject('avro-avengers-value', 'BACKWARD')
    }


    task runAvroProducer(type: JavaExec){
        classpath sourceSets.main.runtimeClasspath
        main = "bbejeck.chapter_3.producer.avro.AvroProducer"
    }

    task runAvroConsumer(type: JavaExec){
        classpath sourceSets.main.runtimeClasspath
        main = "bbejeck.chapter_3.consumer.avro.AvroConsumer"
    }


}
